@page "/dex"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>PokeDex</PageTitle>

<MudProgressLinear Striped="loading" Color="Color.Success" Size="Size.Large" Value="porcentaje"
    Style="position: fixed" />
    
<br />

    <Virtualize Items="listoflist" Context="list" >
        <MudGrid>
        @foreach(Pokemon p in list){
            <MudItem xs="2">
            <PokeCard Pokemon="@p" CheckCallback="@UpdateCheckedPokemon" />
            </MudItem>
        }
           </MudGrid>
    </Virtualize>



@code {

    List<Pokemon> todos = new();
    List<Pokemon> vistos = new();
    List<Pokemon> prueba = new();
    bool loading = true;
    int porcentaje = 50;
    List<List<Pokemon>> listoflist=new();//a virtualize no le gusta si no lo hago asi

    protected override async Task OnInitializedAsync()
    {
        /*var response = await Http.GetAsync("https://pokeapi.co/api/v2/pokemon");
        Pokemon pokemons = await response.Content.ReadFromJsonAsync<PokemonResponse>();
        Console.WriteLine(pokemons); */

        //await Task.Delay(100);

        //obtener la lista de pokemon ya marcados de localstorage
        vistos = await localStorage.GetItemAsync<List<Pokemon>>("vistos");
        var response = await Http.GetAsync("https://pokeapi.co/api/v2/pokemon?offset=0&limit=1154");

        var rs = response.Content.ReadAsStringAsync().Result;

        ApiResponse apiresp = JsonSerializer.Deserialize<ApiResponse>(rs);

        List<Pokemon> tmp =new();
        //tuve que partir la lista de pokemon por renglones para poder utilizar virtualize
        for(int i=0;i<apiresp.results.Count;i++){
            
            
            Pokemon p = new();
            p.ID=i+1;
           
            p.Name=apiresp.results[i].name;
             
            tmp.Add(p);
            if(i%5==0 && i>0 ){
                listoflist.Add(tmp);
                tmp=new();
            }
            i++;
        }
    StateHasChanged();
    }
    protected void UpdateCheckedPokemon(int id)
    {
        //Al cambiar el checkbox en una pokecard llega aca y ya tenemos el id
       
    }
//estos tipos son necesarios para no usar newtonsoft json
        public class Result
    {
        public string name { get; set; }
        public string url { get; set; }
    }

    public class ApiResponse
    {
        public int count { get; set; }
        public string next { get; set; }
        public object previous { get; set; }
        public List<Result> results { get; set; }
    }
    

}
