@page "/dex"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>PokeDex</PageTitle>

<MudProgressLinear Color="Color.Success" Size="Size.Large" Value="porcentaje"
    Style="position: fixed" />

<br />

<Virtualize Items="listoflist" Context="list">
    <MudGrid>
        @foreach (Pokemon p in list)
        {
            <MudItem xs="2">
                <PokeCard Pokemon="@p" CheckCallback="@UpdateCheckedPokemon" />
            </MudItem>
        }
    </MudGrid>
</Virtualize>


@code {

    List<Pokemon> todos = new();
    List<Pokemon> vistos = new();
    bool loading = true;
    double porcentaje = 0;
    List<List<Pokemon>> listoflist = new();//a virtualize no le gusta si no lo hago asi

    protected override async Task OnInitializedAsync()
    {
        /*var response = await Http.GetAsync("https://pokeapi.co/api/v2/pokemon");
        Pokemon pokemons = await response.Content.ReadFromJsonAsync<PokemonResponse>();
        Console.WriteLine(pokemons); */

        //await Task.Delay(100);

        //obtener la lista de pokemon ya marcados de localstorage
        vistos = await localStorage.GetItemAsync<List<Pokemon>>("vistos");
        var response = await Http.GetAsync("https://pokeapi.co/api/v2/pokemon?offset=0&limit=1154");
        var rs = response.Content.ReadAsStringAsync().Result;
        ApiResponse apiresp = JsonSerializer.Deserialize<ApiResponse>(rs);

        List<Pokemon> tmp = new();
        //tuve que partir la lista de pokemon por renglones para poder utilizar virtualize
        for (int i = 0; i < 100; i++)
        {
            Pokemon p = new();
            p.ID = i + 1;
            p.Name = apiresp.results[i].name;
            if (vistos != null)
            {
                for (int j = 0; j < vistos.Count; j++)
                {
                    if (p.ID == vistos[j].ID)
                    {
                        p.Seen = true;
                    }
                }
            }
            todos.Add(p);
            tmp.Add(p);
            if (i % 5 == 0 && i > 0)
            {
                listoflist.Add(tmp);
                tmp = new();
            }
        
        }
        porcentaje = ((vistos.Count * 100) / todos.Count);
        StateHasChanged();
    }
    protected void UpdateCheckedPokemon(int id)
    {
        int index(int id)
        {
            for (int i = 0; i < todos.Count; i++)
            {
                if (todos[i].ID == id)
                {
                    return i;
                }
            }
            return -1;
        }

        var p = todos.Find(x => x.ID == id);
        var q = vistos.Find(x => x.ID == id);

        if (q == null)
        {
            p.Seen = true;
            vistos.Add(p);
            todos[index(p.ID)].Seen = p.Seen;
        }
        else
        {
            q.Seen = false;
            vistos.Remove(q);
            todos[index(q.ID)].Seen = q.Seen;
        }

        localStorage.SetItemAsync("vistos", vistos);
        porcentaje = ((vistos.Count * 100) / todos.Count);

        // Actualizar el porcentaje dividiendo la cantidad de pokemon vistos entre la cantidad total de pokemon


        Console.WriteLine(porcentaje);
        Console.WriteLine(vistos.Count);
        Console.WriteLine(todos.Count);
        StateHasChanged();

    }
    //estos tipos son necesarios para no usar newtonsoft json
    public class Result
    {
        public string name { get; set; }
        public string url { get; set; }
    }

    public class ApiResponse
    {
        public int count { get; set; }
        public string next { get; set; }
        public object previous { get; set; }
        public List<Result> results { get; set; }
    }


}
